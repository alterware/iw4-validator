name: Build

on:
  push:
    branches:
      - "**"
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - "**"
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PREMAKE_VERSION: "5.0.0-beta2"

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - debug
          - release
        arch:
          - x64
          - arm64
        include:
          - arch: x64
            platform: x64
          - arch: arm64
            platform: arm64
    steps:
      - name: Check out files
        uses: actions/checkout@main
        with:
          submodules: true
          fetch-depth: 0
          lfs: false

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@main

      - name: Install Premake5
        uses: diamante0018/setup-premake@master
        with:
          version: ${{ env.PREMAKE_VERSION }}

      - name: Generate project files
        run: premake5 vs2022

      - name: Set up problem matching
        uses: ammaraskar/msvc-problem-matcher@master

      - name: Build ${{matrix.arch}} ${{matrix.configuration}} binaries
        run: msbuild /m /v:minimal /p:Configuration=${{matrix.configuration}} /p:Platform=${{matrix.platform}} build/iw4-validator.sln

      - name: Upload ${{matrix.arch}} ${{matrix.configuration}} binaries
        uses: actions/upload-artifact@main
        with:
          name: windows-${{matrix.arch}}-${{matrix.configuration}}
          path: |
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/iw4-validator.exe
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/iw4-validator.pdb

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - debug
          - release
        arch:
          - x64
          - arm64
    steps:
      - name: Check out files
        uses: actions/checkout@main
        with:
          submodules: true
          fetch-depth: 0
          lfs: false

      - name: Install dependencies (arm64)
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install crossbuild-essential-arm64 -y

      - name: Install Premake5
        uses: diamante0018/setup-premake@master
        with:
          version: ${{ env.PREMAKE_VERSION }}

      - name: Generate project files
        run: premake5 gmake2

      - name: Set up problem matching
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Set up CC environment variable
        if: matrix.arch == 'arm64'
        run: |
          echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Set up CXX environment variable
        if: matrix.arch == 'arm64'
        run: |
          echo "CXX=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build ${{matrix.arch}} ${{matrix.configuration}} binaries
        run: |
          pushd build
          make config=${{matrix.configuration}}_${{matrix.arch}} -j$(nproc)

      - name: Upload ${{matrix.arch}} ${{matrix.configuration}} binaries
        uses: actions/upload-artifact@main
        with:
          name: linux-${{matrix.arch}}-${{matrix.configuration}}
          path: |
            build/bin/${{matrix.arch}}/${{matrix.configuration}}/iw4-validator

  deploy:
    name: Deploy artifacts
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - name: Setup main environment
        run: echo "ALTERWARE_MASTER_PATH=${{ secrets.ALTERWARE_MASTER_SSH_PATH }}" >> $GITHUB_ENV

      - name: Download Release binaries
        uses: actions/download-artifact@main
        with:
          name: windows-x64-release

      # Set up committer info and GPG key
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.7.0
        with:
          key: ${{ secrets.ALTERWARE_MASTER_SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.ALTERWARE_MASTER_SSH_ADDRESS }} >> ~/.ssh/known_hosts

      - name: Upload iw4-validator binary
        run: rsync -avz iw4-validator.exe ${{ secrets.ALTERWARE_MASTER_SSH_USER }}@${{ secrets.ALTERWARE_MASTER_SSH_ADDRESS }}:${{ env.ALTERWARE_MASTER_PATH }}/tools/

  docker:
    name: Create Docker Image
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
      - name: Check out files
        uses: actions/checkout@main
        with:
          sparse-checkout: |
            Dockerfile
            README.md
          sparse-checkout-cone-mode: false

      - name: Download Release binaries
        uses: actions/download-artifact@main

      - name: Compress Binaries
        run: |
          for dir in */; do
            if [[ $dir == *"windows"* ]]; then
              cd "$dir" && zip -r "../${dir%/}.zip" . && cd ..
            else
              tar -czvf "${dir%/}.tar.gz" -C "$dir" .
            fi
          done
        shell: bash

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.2.0

      - name: Login to DockerHub
        uses: docker/login-action@v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: |
            alterware/iw4-validator
          tags: |
            ${{ github.ref_name }}
            latest

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
